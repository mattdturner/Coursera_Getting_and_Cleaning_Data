source("complete.R")
complete("specdata",1:15)
source("complete.R")
complete("specdata",1:15)
source("complete.R")
complete("specdata",1:15)
complete("specdata",30:25)
source("complete.R")
complete("specdata",30:25)
source("complete.R")
complete("specdata",30:25)
df <- complete("specdata",30:25)
df[order(30:25)]
source("corr.R",150)
source("corr.R")
corr("specdata",150)
source("corr.R")
corr("specdata",150)
?cor
source("corr.R")
corr("specdata",150)
source("corr.R")
df = corr("specdata",150)
head(df)
df[df$ID==1]
df[df$ID==1,]
df[df$ID==1,]$sulfate
source("corr.R")
cr <- corr("specdata",150)
head(cr)
summary(cr)
cr <- corr("specdata",400)
head(cr)
summary(cr)
cr <- corr("specdata",5000)
summary(cr)
cr
length(cr)
cr <- corr("specdata")
summary(cr)
length(cr)
source ("pollutantmean.R")
pollutantmean("specdata","sulfate",1:10)
pollutantmean("specdata","nitrate",70:72)
pollutantmean("specdata","sulfate",34)
pollutantmean("specdata","nitrate")
cc <- complete("specdata", c(6, 10, 20, 34, 100, 200, 310))
print(cc$nobs)
cc <- complete("specdata", 54)
print(cc$nobs)
set.seed(42)
cc <- complete("specdata", 332:1)
use <- sample(332, 10)
print(cc[use, "nobs"])
use
cc
use
cc[304,"nobs"]
cr <- corr("specdata")
cr <- sort(cr)
set.seed(868)
out <- round(cr[sample(length(cr), 5)], 4)
print(out)
cr <- corr("specdata", 129)
cr <- sort(cr)
n <- length(cr)
set.seed(197)
out <- c(n, round(cr[sample(n, 5)], 4))
print(out)
cr <- corr("specdata", 2000)
n <- length(cr)
cr <- corr("specdata", 1000)
cr <- sort(cr)
print(c(n, round(cr, 4)))
set.seed(42)
cc <- complete("specdata", 332:1)
use <- sample(332, 10)
use
cc
use
swirl()
library("swirl")
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags,class)
cls_list
class(cls_list)
as.character(cls_list)
?sapply
cls_vect <- sapply(flags,class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[,11:17]
head(flag_colors)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
flag_shapes <- flags9,19:23]
flag_shapes <- flags[],19:23]
flag_shapes <- flags[,19:23]
lapply(flag_shapes,range)
shape_mat <- sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals <- lapply(flags,unique)
unique_vals
sapply(unique_vals,length)
sapply(flags,unique)
lapply(unique_vals,function(elem) elem[2])
sapply(flags,unique)
vapply(flags,unique,numeric(1))
ok()
sapply(flags,class)
vapply(flags,class,character(1))
?tapply
tabls(flags$landmass)
table(flags$landmass)
table(flags$animate)
tapply(flags$animate,flags$landmass,mean)
tapply(flags$population,flags$red,summary)
tapply(flags$population,flags$landmass,summary)
library(datasets)
data(iris)
?iris
sapply(iris$Sepal.Width,mean)
iris$Species
tapply(iris$Sepal.Width,iris$Species,mean)
colmeans(iris)
colMeans(iris)
apply(iris[,1:4],2,mean)
apply(iris,1,mean)
apply(iris,2,mean)
apply(iris[,1:4],1,mean)
rowMeans(iris[,1:4])
data(mtcars)
lapply(mtcars,mean)
tapply(mtcars$mpg,mtcars$cyl,mean)
with(mtcars,tapply(mpg,cyl,mean))
apply(mtcars,2,mean)
mean(mtcars$mpg,mtcars$cyl)
tapply(mtcars$cyl,mtcars$mpg,mean)
sapply(mtcars,cyl,mpg)
sapply(mtcars,cyl,mean)
split(mtcars,mtcars$cyl)
sapply(split(mtcars$mpg,mtcars$cyl),mean)
tapply(mtcars$hp,mtcars$cyl)
tapply(mtcars$hp,mtcars$cyl,mean)
hp_mean <- tapply(mtcars$hp,mtcars$cyl,mean)
hp_mean
hp_mean$`8` - hp_mean`4`
hp_mean$`8` - hp_mean$`4`
hp_mean[['8']]
hp_mean[['8']] - hp_mean[['4']]
debug(ls)
ls
ls()
exit
quit
exit*()
exit()
quit()
tapply(iris$Sepal.Length,iris$Species,mean)
ls()
tapply
tapply(iris$Sepal.Length,iris$Species,mean)
setwd('/Users/matthewturner/Desktop/School/Coursera/Getting_And_Cleaning_Data/')
##
## Question 1
##
# Ensure that the 'httr' library is loaded
library(httr)
oauth_endpoints('github')
myapp <- oauth_app("github",
key = "aadfd2f73be7af39be86",
secret = "7ea5bb950dd448f1ee291597b8464ac54ea21b49")
# Get oauth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"),myapp)
# Use the api
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
##
## Question 2
##
# Load the sqldf library
install.packages("sqldf")
library(RMySQL)
library(sqldf)
library(sqldf)
# Read the csv file
acs <- read.csv(file="getdata_data_ss06pid.csv",header=TRUE,sep=',')
setwd("/Users/matthewturner/Desktop/School/Coursera/Getting_And_Cleaning_Data/week2/")
acs <- read.csv(file="getdata_data_ss06pid.csv",header=TRUE,sep=',')
sqldf("select pwgtp1 from acs where AGEP < 50")
require(sqldf)
sqldf("select pwgtp1 from acs where AGEP < 50")
getOption("sqldf.driver")
sqldf("select pwgtp1 from acs where AGEP < 50",drv="SQLite")
sqldf("select pwgtp1 from acs where AGEP < 50",drv="SQLite")
length(unique(acs$AGEP))
sqldf("select distinct AGEP from acs")
sqldf("select distinct AGEP from acs",drv="SQLite")
url_address <- "http://biostat.jhsph.edu/~jleek/contact.html"
con <- url(url_address)
htmlCode <- readlines(con)
close(con)
htmlCode <- readLines(con)
con <- url(url_address)
htmlCode <- readLines(con)
close(con)
sapply(htmlCode[c(10,20,30,100)],nchar)
data <- read.csv("getdata_wksst8110.for",header=TRUE)
head(data)
dim(data)
data <- read.fwd(file="getdata_wksst8110.for",widths=c(-1,9,-5,4,4,-5,4,4,-5,4,4,-5,4,4), skip=4)
data <- read.fwf(file="getdata_wksst8110.for",widths=c(-1,9,-5,4,4,-5,4,4,-5,4,4,-5,4,4), skip=4)
head(data)
sum(data[,4])
url_address <- "http://biostat.jhsph.edu/~jleek/contact.html"
con <- url(url_address)
htmlCode <- readLines(con)
close(con)
sapply(htmlCode[c(10,20,30,100)],nchar)
source('~/Desktop/School/Coursera/Getting_And_Cleaning_Data/week2/week2_quiz.R')
